{
  "name": "russian",
  "label": "Русский",
  "locale": {
    "pages": {
      "HeadersDemo": {
        "pageAbout": "Заголовки могут быть использованы для того, чтоб разделять информацию по смыслу.",
        "infoBlock1": "Вы можете использовать 6 видов заголовков: ```H1```, ```H2```, ```H3```, ```H4```, ```H5```. Они отличаются друг от друга размером и тем, что в заголовках размером ниже H3 по умолчанию не рисуется разделительная линия и они не добавляются в автоматически сгенерированный блок содержания страницы. Чем больше цифра в заголовке - тем меньше ег размер. Таким образом, ```H1``` - самый большой заголовок, а ```H6``` - самый маленький.",
        "headersExample": "Пример заголовков",
        "contentAutoGeneration": "Автоматическая генерация содержания страницы",
        "tagsInfo": "Для того, чтобы заголовок не создавал пункты в автоматическом содержании страницы - передайте ему __параметр__ ```noTag```. Если заголовок создаёт присутствует в содержании - при наведении на него мышью - слева будет отображаться кнопка смены якоря для удобного указания места на странице при копировании __url__.",
        "noTagInfo": "> По умолчанию, у заголовков ```H1```, ```H2```, ```H3``` __параметр__ ```noTag = false```",
        "divider": "Разделитель",
        "dividerInfo": "Для того, чтобы заголовок не имел разделительую черту - передайте ему __параметр__ ```noDivider```.",
        "noDividerInfo": "> По умолчанию, у заголовков ```H1```, ```H2```, ```H3``` __параметр__ ```noDivider = false```",
        "customAnchors": "Пользовательские якоря",
        "anchorInfo": "Вы можете задавать якорь для заголовка вручную с помощью параметра ```id```. Если он не указан - заголовок автоматически сгенерирует якорь из своего содержимого."
      },
      "MarkdownDemo": {
        "pageAbout": "Markdown - компонент, предназначенный для преобразования текста в нотации markdown в Material Docs.",
        "infoBlock1": "Markdown - это упрощенный язык разметки, которы удобно использовать для создания статей, заметок и тому подобного.",
        "overviewExample": "Обзорный пример",
        "moreInfo": "Больше информации",
        "moreInfoDetails": "Если вы хотите получить дополнительную информацию о синтаксисе markdown - смотрите [этот гайд](https://www.markdownguide.org/basic-syntax/)",
        "deepIntegration": "Глубокая интеграция",
        "infoBlock2": "Классически, __markdown__ поддреживает два вида блоков кода: строчный и блочный. В Material Docs существует три способа продемонстрировать код - с помощью компонентов: ```Code```, ```ExpansionCode```, ```DemoWithCode```. Вы можете выбирать один из этих компонентов прямо в markdown коде.",
        "codeComponents": [
          {
            "name": "Code",
            "key": "code",
            "params": [
              {
                "name": "type",
                "description": "Тип блока с кодом. Для Code - \"code\""
              },
              {
                "name": "theme",
                "description": "Параметр theme для компонента Code."
              },
              {
                "name": "language",
                "description": "Названия языкового паккета для компонента Code."
              }
            ]
          },
          {
            "name": "Expansion code",
            "key": "expansion-code",
            "params": [
              {
                "name": "type",
                "description": "Тип блока с кодом. Для ExpansionCode - \"expansion-code\""
              },
              {
                "name": "theme",
                "description": "Параметр theme для компонента Code."
              },
              {
                "name": "name",
                "description": "Параметр name для элемента ExpansionCode. Будет показан в заголовке H3."
              },
              {
                "name": "language",
                "description": "Названия языкового паккета для компонента Code."
              },
              {
                "name": "collapsedHeight",
                "description": "Параметр collapsedHeight для компонента Code. Высота блока с кодом когда он закрыт."
              }
            ]
          },
          {
            "name": "Demo with code",
            "key": "demo-with-code",
            "description": "If you want to provide ```DemoWithCode``` element with demo component, you should pass to ```Markdown``` component prop data with object. Then pass key to demo param in markdown code block and ```Markdown``` will get demo component from data.",
            "params": [
              {
                "name": "type",
                "description": "Тип блока с кодом. Для DemoWithCode - \"demo-with-code\""
              },
              {
                "name": "theme",
                "description": "Параметр theme для компонента Code."
              },
              {
                "name": "name",
                "description": "Параметр name для элемента DemoWithCode. Будет показан в заголовке H3."
              },
              {
                "name": "language",
                "description": "Названия языкового паккета для компонента Code."
              },
              {
                "name": "demo",
                "description": "Ключ переменной в объекте data."
              }
            ]
          }
        ]
      },
      "DocsPageAPI": {
        "pageAbout": "API документация компонента React DocsPage. Узнайте больше о props и CSS кастомизации.",
        "pageSearchDescription": "DocsPage - react компонент, созданный для обеспечения страничного функционала.",
        "ComponentNameHeader": "Название компонента",
        "ComponentNameText": "Название DocsPage может быть использовано для обеспечения стандартных пропов и переопределения стилей на уровне темы.",
        "enableProps": true,
        "props": [
          {
            "name": "name",
            "type": "string",
            "default": "",
            "description": "Название страницы. Route будет сгенерирован автоматически из названия."
          },
          {
            "name": "searchTags",
            "type": "string[]",
            "default": "",
            "description": "Ключевые слова для поиска."
          },
          {
            "name": "searchLabel",
            "type": "string",
            "default": "",
            "description": "Текст, который будет отображен в списке результатов поиска, если страница соответствует критериям поиска."
          },
          {
            "name": "searchDescription",
            "type": "string",
            "default": "",
            "description": "Описание страницы, которое будет отображено в списке результатов поиска под лейблом, если страница соответствует критериям поиска."
          },
          {
            "name": "noGenerateAutoSearch",
            "type": "boolean",
            "default": "false",
            "description": "Если true, страница не будет генерировать информацию для поиска автоматичечки."
          },
          {
            "name": "noAutoMenu",
            "type": "boolean",
            "default": "false",
            "description": "Если true, страница не будет учавствовать в генерации автоматического меню."
          },
          {
            "name": "children",
            "type": "node",
            "default": "",
            "description": "Дети компонента."
          }
        ],
        "forwardRef": true,
        "enableCss": true,
        "css": {
          "root": "Стили, примененные к корневому элементу.",
          "contentItem": "Стили, примененные к item элементу панели содержания.",
          "contentItemActive": "Стили, примененные к item элементу панели содержания когда он активен.",
          "contentLink": "Стили, примененные к элементу link элемента item панели содержания.",
          "copyright": "Стили, примененные к панели copyright если она показана."
        }
      },
      "DemoWithCodeAPI": {
        "pageAbout": "API документация компонента React DemoWithCode. Узнайте больше о props и CSS кастомизации.",
        "pageSearchDescription": "DemoWithCode - react компонент для создания блоков кодв с интерактивной демонстрацией.",
        "ComponentNameText": "Название DemoWithCode может быть использовано для обеспечения стандартных пропов и переопределения стилей на уровне темы.",
        "enableProps": true,
        "props": [
          {
            "name": "name",
            "type": "string",
            "default": "",
            "description": "Название блока. Если определено - будет показано в заголовке H3."
          },
          {
            "name": "code",
            "type": "string",
            "default": "",
            "description": "Код, который будет показан во внутреннем блоке кода."
          },
          {
            "name": "ratio",
            "type": "AspectRatio",
            "default": "",
            "description": "Если определен - демонстрационный блок будет удерживать соотноошение сторонон, указанное в параметре."
          },
          {
            "name": "defaultExpanded",
            "type": "boolean",
            "default": "false",
            "description": "Если true - блок кода будет развернут при загрузке."
          },
          {
            "name": "noTag",
            "type": "boolean",
            "default": "false",
            "description": "Если true и проп name определен - заголовок с именем не будет генерировать информацию для автоматического содержания."
          },
          {
            "name": "paperContainer",
            "type": "boolean",
            "default": "false",
            "description": "Если true - демонстрационный блок будет обёрнут в компонент Paper."
          },
          {
            "name": "actions",
            "type": "DemoCodeAction[]",
            "default": "",
            "description": "Массив дополнительных действий. Действия будут отображены в выпадающем меню при нажатии на кнопку с иконкой ExpandMore."
          },
          {
            "name": "children",
            "type": "node",
            "default": "",
            "description": "Дети компонента. Будут помещены в демонстрационный блок."
          }
        ],
        "forwardRef": true,
        "enableCss": true,
        "css": {
          "root": "Стили, примененные к корневому элементу.",
          "collapse": "Стили, примененные к компоненту Collapse, который содержит код.",
          "toolbar": "Стили, примененные к компоненту Toolbar с иконками и названием.",
          "paperContainer": "Стили, примененные к контейнеру Paper если проп paperContainer равен true.",
          "menuButtonLink": "Стили, примененные к компоненту link в меню дополнительных действий.",
          "demo": "Стили, примененные к дкмонстрационному блоку."
        }
      },
      "CodeAPI": {
        "pageAbout": "API документация компонента React Code. Узнайте больше о props и CSS кастомизации.",
        "pageSearchDescription": "Code - компонент react, созданный для того, чтоб демонстрировать код.",
        "ComponentNameText": "The Code name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "language",
            "type": "string",
            "default": "\"javascript\"",
            "description": "Language name for code highlighter."
          },
          {
            "name": "theme",
            "type": "\"light\"",
            "default": "\"light\" | \"dark\" | \"darcula\"",
            "description": "\tCode highlighting and background styling type."
          },
          {
            "name": "children",
            "type": "string",
            "default": "",
            "description": "\tCode to display in code highlighter."
          }
        ],
        "enableCss": true,
        "css": {
          "root": "Styles applied to the root element.",
          "highlighterContainer": "Styles applied to the code highlighter container."
        }
      },
      "PagesGroupAPI": {
        "pageAbout": "The API documentation of the PagesGroup React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "PagesGroup - react component, designed to combine pages in groups for AutoDocsMenu.",
        "ComponentNameText": "The PagesGroup name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "name",
            "type": "string",
            "default": "",
            "description": "Name of the group. Will be displayed on button in menu."
          },
          {
            "name": "getData",
            "type": "(data: PagesGroupData): void",
            "default": "",
            "description": "Callback, provided to get group data without context usage."
          },
          {
            "name": "children",
            "type": "node",
            "default": "",
            "description": "Children of an element."
          }
        ],
        "enableCss": false,
        "noCssText": "This is a service component. It doesn't generate html elements."
      },
      "ImageAPI": {
        "pageAbout": "The API documentation of the Image React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "Image - react component, designed to show images. Image component uses lazy load technology.",
        "ComponentNameText": "The Image name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "src",
            "type": "string",
            "default": "",
            "description": "Source link. Used to define image path."
          },
          {
            "name": "alt",
            "type": "string",
            "default": "",
            "description": "Alternative text. Will be displayed if image can not load."
          },
          {
            "name": "fullWidth",
            "type": "boolean",
            "default": "false",
            "description": "If true - image will be 100 percent wide."
          },
          {
            "name": "children",
            "type": "node",
            "default": "",
            "description": "Elements, which will appear in image caption."
          }
        ],
        "forwardRef": true,
        "enableCss": true,
        "css": {
          "root": "Styles applied to the root element.",
          "fullWidth": "Styles applied to the root component if fullWidth prop is true."
        }
      },
      "ListItemAPI": {
        "pageAbout": "The API documentation of the ListItem React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "ListItem - react component, designed to generate list. Component simulates list item component.",
        "ComponentNameText": "The ListItem name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "type",
            "type": "\"circle\" | \"square\" | \"upper-roman\" | \"lower-alpha\" | \"none\"",
            "default": "\"circle\"",
            "description": "Type of list decoration."
          },
          {
            "name": "dense",
            "type": "boolean",
            "default": "false",
            "description": "If true, vertical distance between list items will be smaller."
          },
          {
            "name": "children",
            "type": "node",
            "default": "",
            "description": "Children of an element."
          }
        ],
        "forwardRef": true,
        "enableCss": true,
        "css": {
          "root": "Styles applied to the root element.",
          "typeCircle": "Styles applied to the root component if type prop equals circle.",
          "typeSquare": "Styles applied to the root component if type prop equals square.",
          "typeRoman": "Styles applied to the root component if type prop equals upper-roman.",
          "typeAlpha": "Styles applied to the root component if type prop equals lower-alpha.",
          "typeNone": "Styles applied to the root component if type prop equals none.",
          "list": "Styles applied to the inner ul element.",
          "dense": "Styles applied to the root element if prop dense is true."
        }
      },
      "ExpansionCodeAPI": {
        "pageAbout": "The API documentation of the ExpansionCode React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "ExpansionCode - react component, designed to show code in collapsable blocks. User can view full code or part of code.",
        "ComponentNameText": "The ExpansionCode name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "name",
            "type": "string",
            "default": "",
            "description": "Name of the code block. If defined - it will appear in H3 header in ExpansionCode toolbar."
          },
          {
            "name": "noTag",
            "type": "boolean",
            "default": "false",
            "description": "If true and name prop is true - header will not generate tags fot content panel."
          },
          {
            "name": "collapsedHeight",
            "type": "number | string",
            "default": "100px",
            "description": "Height of the component when it is collapsed."
          },
          {
            "name": "actions",
            "type": "DemoCodeAction[]",
            "default": "",
            "description": "Array of additional actions. The actions will be displayed in the dropdown menu when you click the ExpandMore icon button."
          },
          {
            "name": "theme",
            "type": "\"light\" | \"dark\" | \"darcula\"",
            "default": "\"light\"",
            "description": "Code highlighting and background styling type."
          },
          {
            "name": "language",
            "type": "string",
            "default": "\"javascript\"",
            "description": "Language name for code highlighter."
          },
          {
            "name": "children",
            "type": "string",
            "default": "\"light\"",
            "description": "Code to display in code highlighter. This code will appear in the Code block if component is expanded."
          }
        ],
        "forwardRef": true,
        "enableCss": true,
        "css": {
          "root": "Styles applied to the root element.",
          "collapsedCode": "Styles applied to the div element between Collapse component and Code component when code is collapsed.",
          "collapse": "Styles applied to the Collapse component, which contains Code.",
          "toolbar": "Styles applied to the Toolbar component.",
          "codeName": "Styles applied to the H3 header with text from prop name.",
          "menuButtonLink": "Styles applied to link element of actions menu button."
        }
      },
      "BlockAPI": {
        "pageAbout": "The API documentation of the Block React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "Block - react component, designed to show slided information blocks, such as tips, notes, etc.",
        "ComponentNameText": "The Block name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "color",
            "type": "\"dark\" | \"light\"",
            "default": "\"light\"",
            "description": "Color styling, which will be applied to block."
          },
          {
            "name": "children",
            "type": "node",
            "default": "",
            "description": "Children of an element."
          }
        ],
        "forwardRef": true,
        "enableCss": true,
        "css": {
          "root": "Styles applied to the root element.",
          "colorLight": "Styles applied to the root element when prop color equals \"light\"",
          "colorDark": "Styles applied to the root element when prop color equals \"dark\""
        }
      },
      "CodeSpanAPI": {
        "pageAbout": "The API documentation of the CodeSpan React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "CodeSpan - react component, designed to show code in monospace font inside inline code block.",
        "ComponentNameText": "The CodeSpan name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "color",
            "type": "\"default\" | \"primary\" | \"secondary\" | \"grey\"",
            "default": "\"default\"",
            "description": "Background color of the inline code block."
          },
          {
            "name": "text",
            "type": "\"white\" | \"black\" | \"inherit\"",
            "default": "\"inherit\"",
            "description": "Text color of code."
          },
          {
            "name": "children",
            "type": "node",
            "default": "",
            "description": "Children of an element."
          }
        ],
        "forwardRef": true,
        "enableCss": true,
        "css": {
          "root": "Styles applied to the root element.",
          "colorDefault": "Styles applied to the root element when prop color equals \"default\"",
          "colorPrimary": "Styles applied to the root element when prop color equals \"primary\"",
          "colorSecondary": "Styles applied to the root element when prop color equals \"secondary\"",
          "colorGrey": "Styles applied to the root element when prop color equals \"grey\"",
          "font": "Styles applied to the root element and defining font properties",
          "textInherit": "Styles applied to the root element when prop text equals \"inherit\"",
          "textWhite": "Styles applied to the root element when prop text equals \"white\"",
          "textBlack": "Styles applied to the root element when prop text equals \"black\""
        }
      },
      "ItalicAPI": {
        "pageAbout": "The API documentation of the Italic React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "Italic - react component, designed to make text italic.",
        "ComponentNameText": "The Italic name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "children",
            "type": "node",
            "default": "",
            "description": "Children of an element."
          }
        ],
        "forwardRef": true,
        "enableCss": true,
        "css": {
          "root": "Styles applied to the root element.",
          "italic": "Styles applied to the root element, provides italic text styling."
        }
      },
      "ListAPI": {
        "pageAbout": "The API documentation of the List React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "List - react component, designed to show code in monospace font inside inline code block.",
        "ComponentNameText": "The List name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "image",
            "type": "string",
            "default": "",
            "description": "List styling image. If defined - will be applied to list-style-image style."
          },
          {
            "name": "styling",
            "type": "\"inside\" | \"outside\" | \"inherit\" | \"revert\" | \"unset\"",
            "default": "\"inside\"",
            "description": "List styling type."
          },
          {
            "name": "children",
            "type": "node",
            "default": "",
            "description": "Children of an element."
          }
        ],
        "forwardRef": true,
        "enableCss": true,
        "css": {
          "root": "Styles applied to the root element.",
          "stylePositionInside": "Styles applied to the root element when prop styling equals \"inside\"",
          "stylePositionOutside": "Styles applied to the root element when prop styling equals \"outside\"",
          "stylePositionInherit": "Styles applied to the root element when prop styling equals \"inherit\"",
          "stylePositionRevert": "Styles applied to the root element when prop styling equals \"revert\"",
          "stylePositionUnset": "Styles applied to the root element when prop styling equals \"unset\""
        }
      },
      "DocsMenuItemAPI": {
        "pageAbout": "The API documentation of the DocsMenuItem React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "DocsMenuItem - react component, designed create menu items for <DocsMenu/>.",
        "ComponentNameText": "The DocsMenuItem name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "defaultExpanded",
            "type": "boolean",
            "default": "false",
            "description": "If true, panel will be expanded on startup."
          },
          {
            "name": "textPrimary",
            "type": "string",
            "default": "",
            "description": "Primary text form menu list item."
          },
          {
            "name": "textSecondary",
            "type": "string",
            "default": "",
            "description": "Secondary text for menu list item. Will be displayed in the bottom."
          },
          {
            "name": "icon",
            "type": "string",
            "default": "node",
            "description": "Icon, displayed in left corner. Used to customize menu item appearance."
          },
          {
            "name": "onClick",
            "type": "function(event: any): void",
            "default": "",
            "description": "Callback, will be triggered on onclick event handling."
          },
          {
            "name": "page",
            "type": "string | any",
            "default": "",
            "description": "Page name for redirecting or object structure for routing-manager changeRoute."
          },
          {
            "name": "link",
            "type": "string",
            "default": "",
            "description": "Link to the page, which includes groups. If defined - will be used with highest priority."
          },
          {
            "name": "isCurrent",
            "type": "(function(routeParams, pageRoute, page): boolean) | boolean",
            "default": "false",
            "description": "If equals true or function returned true, button will be active. Used when displayed page, connected to this menu item."
          },
          {
            "name": "dense",
            "type": "boolean",
            "default": "false",
            "description": "If true, compact vertical padding designed for keyboard and mouse input will be used for the list and list items. The prop is available to descendant components as the dense context."
          },
          {
            "name": "children",
            "type": "node",
            "default": "",
            "description": "Children of an element."
          }
        ],
        "forwardRef": true,
        "enableCss": true,
        "css": {
          "root": "Styles applied to the root element.",
          "highlighted": "Styles applied to the root element when prop isCurrent equals or returned true",
          "collapse": "Styles applied to the Collapse element for nested menu items."
        }
      },
      "MarkdownAPI": {
        "pageAbout": "The API documentation of the DocsMenuItem React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "DocsMenuItem - react component, designed create menu items for <DocsMenu/>.",
        "ComponentNameText": "The DocsMenuItem name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "inline",
            "type": "boolean",
            "default": "false",
            "description": "If true, markdown container will be inline."
          },
          {
            "name": "data",
            "type": "object",
            "default": "{}",
            "description": "Data structure, used as storage to store components or other data, which can not describe via markdown."
          },
          {
            "name": "children",
            "type": "string | string[]",
            "default": "",
            "description": "Markdown based notation. Used to generate visual elements."
          }
        ],
        "forwardRef": true,
        "enableCss": true,
        "css": {
          "root": "Styles applied to the root element."
        }
      },
      "TableAPI": {
        "pageAbout": "The API documentation of the Table React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "Table - react component, designed to create tables.",
        "ComponentNameText": "The Table name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "component",
            "type": "elementType",
            "default": "\"table\"",
            "description": "The component used for the root node. Either a string to use a HTML element or a component."
          },
          {
            "name": "padding",
            "type": "\"default\" | \"checkbox\" | \"none\"",
            "default": "\"default\"",
            "description": "Allows TableCells to inherit padding of the Table."
          },
          {
            "name": "size",
            "type": "\"small\" | \"medium\"",
            "default": "\"medium\"",
            "description": "Allows TableCells to inherit size of the Table."
          },
          {
            "name": "stickyHeader",
            "type": "boolean",
            "default": "false",
            "description": "Set the header sticky."
          },
          {
            "name": "children",
            "type": "node",
            "default": "",
            "description": "The content of the table, normally TableHead and TableBody."
          }
        ],
        "forwardRef": true,
        "enableCss": true,
        "css": {
          "root": "Styles applied to the root element.",
          "stickyHeader": "Styles applied to the root element if stickyHeader={true}."
        }
      },
      "TableRowAPI": {
        "pageAbout": "The API documentation of the TableRow React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "TableRow - react component, designed to create tables.",
        "ComponentNameText": "The TableRow name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "component",
            "type": "elementType",
            "default": "\"tr\"",
            "description": "The component used for the root node. Either a string to use a HTML element or a component."
          },
          {
            "name": "hover",
            "type": "boolean",
            "default": "false",
            "description": "If true, the table row will shade on hover."
          },
          {
            "name": "selected",
            "type": "boolean",
            "default": "false",
            "description": "If true, the table row will have the selected shading."
          },
          {
            "name": "children",
            "type": "node",
            "default": "",
            "description": "Should be valid <tr> children such as TableCell."
          }
        ],
        "forwardRef": true,
        "enableCss": true,
        "css": {
          "root": "Styles applied to the root element.",
          "selected": "Pseudo-class applied to the root element if selected={true}.",
          "hover": "Pseudo-class applied to the root element if hover={true}.",
          "head": "Styles applied to the root element if table variant=\"head\".",
          "footer": "Styles applied to the root element if table variant=\"footer\"."
        }
      },
      "TableCellAPI": {
        "pageAbout": "The API documentation of the TableCell React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "TableCell - react component, designed to create tables.",
        "ComponentNameText": "The TableCell name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "align",
            "type": "\"center\" | \"inherit\" | \"justify\" | \"left\" | \"right\"",
            "default": "\"inherit\"",
            "description": "Set the text-align on the table cell content.\nMonetary or generally number fields should be right aligned as that allows you to add them up quickly in your head without having to worry about decimals."
          },
          {
            "name": "component",
            "type": "elementType",
            "default": "false",
            "description": "The component used for the root node. Either a string to use a HTML element or a component."
          },
          {
            "name": "padding",
            "type": "\"checkbox\" | \"default\" | \"none\"",
            "default": "\"default\"",
            "description": "Sets the padding applied to the cell. By default, the Table parent component set the value (default)."
          },
          {
            "name": "scope",
            "type": "string",
            "default": "",
            "description": "\tSet scope attribute."
          },
          {
            "name": "size",
            "type": "\"medium\" | \"small\"",
            "default": "\"medium\"",
            "description": "Specify the size of the cell. By default, the Table parent component set the value (medium)."
          },
          {
            "name": "sortDirection",
            "type": "\"asc\" | \"desc\" | \"false\"",
            "default": "\"false\"",
            "description": "Set aria-sort direction."
          },
          {
            "name": "variant",
            "type": "\"body\" | \"footer\" | \"head\"",
            "default": "\"body\"",
            "description": "Specify the cell type. By default, the TableHead, TableBody or TableFooter parent component set the value."
          },
          {
            "name": "children",
            "type": "node",
            "default": "",
            "description": "The table cell contents."
          }
        ],
        "forwardRef": true,
        "enableCss": true,
        "css": {
          "root": "Styles applied to the root element.",
          "head": "Styles applied to the root element if variant=\"head\" or context.table.head.",
          "body": "Styles applied to the root element if variant=\"body\" or context.table.body.",
          "footer": "Styles applied to the root element if variant=\"footer\" or context.table.footer.",
          "sizeSmall": "Styles applied to the root element if size=\"small\".",
          "paddingCheckbox": "Styles applied to the root element if padding=\"checkbox\".",
          "paddingNone": "Styles applied to the root element if padding=\"none\".",
          "alignLeft": "Styles applied to the root element if align=\"left\".",
          "alignCenter": "Styles applied to the root element if align=\"center\".",
          "alignRight": "Styles applied to the root element if align=\"right\".",
          "alignJustify": "Styles applied to the root element if align=\"justify\".",
          "stickyHeader": "Styles applied to the root element if context.table.stickyHeader={true}."
        }
      },
      "TableBodyAPI": {
        "pageAbout": "The API documentation of the TableBody React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "TableBody - react component, designed to create tables.",
        "ComponentNameText": "The TableBody name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "component",
            "type": "elementType",
            "default": "\"tbody\"",
            "description": "The component used for the root node. Either a string to use a HTML element or a component."
          },
          {
            "name": "children",
            "type": "node",
            "default": "",
            "description": "The content of the component, normally TableRow."
          }
        ],
        "forwardRef": true,
        "enableCss": true,
        "css": {
          "root": "Styles applied to the root element."
        }
      },
      "TableHeadAPI": {
        "pageAbout": "The API documentation of the TableHead React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "TableHead - react component, designed to create tables.",
        "ComponentNameText": "The TableHead name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "component",
            "type": "elementType",
            "default": "\"thead\"",
            "description": "The component used for the root node. Either a string to use a HTML element or a component."
          },
          {
            "name": "children",
            "type": "node",
            "default": "",
            "description": "The content of the component, normally TableRow."
          }
        ],
        "forwardRef": true,
        "enableCss": true,
        "css": {
          "root": "Styles applied to the root element."
        }
      },
      "BoldAPI": {
        "pageAbout": "The API documentation of the Bold React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "Bold - react component, designed to create tables.",
        "ComponentNameText": "The Bold name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "children",
            "type": "node",
            "default": "",
            "description": "The content of the component."
          }
        ],
        "forwardRef": true,
        "enableCss": true,
        "css": {
          "root": "Styles applied to the root element.",
          "bold": "Styles applied to the root element with bold text styling."
        }
      },
      "AutoDocsMenuAPI": {
        "pageAbout": "The API documentation of the AutoDocsMenu React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "AutoDocsMenu - react component, designed create tables.",
        "ComponentNameText": "The AutoDocsMenu name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "layoutData",
            "type": "PagesGroupData",
            "default": "",
            "description": "Pages and groups hierarchy data."
          }
        ],
        "forwardRef": true,
        "enableCss": false,
        "css": {},
        "noCssText": "This component is service and doesn't have any styles."
      },
      "LanguageSelectorAPI": {
        "pageAbout": "The API documentation of the LanguageSelector React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "LanguageSelector - react component, designed to add language selection mechanism and locale management.",
        "ComponentNameText": "The LanguageSelector name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "size",
            "type": "\"small\" | \"large\"",
            "default": "\"large\"",
            "description": "The size of an element. If small - will be displayed just locale icon, if large - locale icon with current language name."
          }
        ],
        "noPropsText": "This component has no props and takes info with useLang hook. It must be placed inside LangContext.Provider",
        "forwardRef": true,
        "enableCss": true,
        "css": {
          "root": "Styles applied to the root element."
        }
      },
      "SearchFieldAPI": {
        "pageAbout": "The API documentation of the SearchField React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "SearchField - react component, designed to add search mechanism.",
        "ComponentNameText": "The SearchField name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "searchData",
            "type": "SearchDataItem[]",
            "default": "",
            "description": "Array of SearchDataItem items to do search from."
          },
          {
            "name": "doSearch",
            "type": "function(query, searchData): Promise<SearchDataItem[]>",
            "default": "",
            "description": "Callback, called on search. If defined, default search function will not be called. Must return array of SearchDataItem."
          }
        ],
        "forwardRef": true,
        "enableCss": true,
        "css": {
          "root": "Styles applied to the root element.",
          "rootFocused": "Styles applied to the root element when result item is focused.",
          "input": "Styles applied to the Input element.",
          "iconButton": "Styles applied to the IconButton component.",
          "icon": "Styles applied to the icons.",
          "iconClickable": "Styles applied to the icons with button functional.",
          "popper": "Styles applied to the Popper element.",
          "listPaper": "Styles applied to the Paper element, which contains results List."
        }
      },
      "DocsMenuAPI": {
        "pageAbout": "The API documentation of the DocsMenu React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "DocsMenu - react component, designed to create menu.",
        "ComponentNameText": "The DocsMenu name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "dense",
            "type": "boolean",
            "default": "false",
            "description": "Ff true, menu wll have smaller spacing between items."
          },
          {
            "name": "children",
            "type": "node",
            "default": "",
            "description": "Children of an element. Normally DocsMenuItem."
          }
        ],
        "forwardRef": true,
        "enableCss": false,
        "css": {},
        "noCssText": "This is service element. It doesn't have any styles."
      },
      "DocsPagesAPI": {
        "pageAbout": "The API documentation of the DocsPages React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "DocsPages - react component, designed to create pages.",
        "ComponentNameText": "The DocsPages name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "children",
            "type": "node",
            "default": "",
            "description": "Children of an element. Normally DocsPage."
          }
        ],
        "forwardRef": true,
        "enableCss": false,
        "css": {},
        "noCssText": "This is service element. It doesn't have any styles."
      },
      "ListItemContainedAPI": {
        "pageAbout": "The API documentation of the ListItemContained React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "ListItemContained - react component, designed to add list items nesting mechanism.",
        "ComponentNameText": "The ListItemContained name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "children",
            "type": "node",
            "default": "",
            "description": "Children of an element. Normally ListItem."
          }
        ],
        "forwardRef": true,
        "enableCss": false,
        "css": {},
        "noCssText": "This is service element. It doesn't have any styles."
      },
      "DocsLayoutAPI": {
        "pageAbout": "The API documentation of the DocsLayout React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "DocsLayout - react component, designed to create MaterialDocs layout.",
        "ComponentNameText": "The DocsLayout name can be used for providing default props or style overriders at the theme level.",
        "enableProps": true,
        "props": [
          {
            "name": "searchData",
            "type": "SearchDataItem[]",
            "default": "",
            "description": "An array of SearchDataItem items to do search from."
          },
          {
            "name": "noGenerateAutoSearch",
            "type": "boolean",
            "default": "false",
            "description": "If true, Material Docs will not generate search items from pages automatically."
          },
          {
            "name": "defaultLang",
            "type": "Lang",
            "default": "",
            "description": "Default language settings."
          },
          {
            "name": "langs",
            "type": "Lang[]",
            "default": "",
            "description": "List of all available langs."
          },
          {
            "name": "onHelpToTranslate",
            "type": "function(lang: Lang): void",
            "default": "",
            "description": "Function, called on help to translate button click. If not defined - button will not be rendered."
          },
          {
            "name": "autoMenu",
            "type": "boolean",
            "default": "false",
            "description": "If true, menu will be generated automatically."
          },
          {
            "name": "router",
            "type": "\"hash-router\" | \"browser-router\"",
            "default": "\"browser-router\"",
            "description": "react-router-dom Router type."
          },
          {
            "name": "basename",
            "type": "string",
            "default": "",
            "description": "Basename param for react-router-dom Router."
          },
          {
            "name": "mask",
            "type": "string",
            "default": "\"/*page\"",
            "description": "Mask for routing-manager ChangeRouteProvider routeMask property."
          },
          {
            "name": "noSearchField",
            "type": "boolean",
            "default": "false",
            "description": "If true, search field will not be displayed."
          },
          {
            "name": "noLanguageSelector",
            "type": "boolean",
            "default": "false",
            "description": "If true, language selector will not be displayed."
          },
          {
            "name": "actions",
            "type": "AppBarAction[]",
            "default": "[]",
            "description": "An array of actions. Will be displayed in material-ui IconButton components in Toolbar component inside AppBar."
          },
          {
            "name": "keywords",
            "type": "string[]",
            "default": "",
            "description": "An array of keywords of the docs for search engines. Needs for metadata."
          },
          {
            "name": "author",
            "type": "string",
            "default": "",
            "description": "The author of the docs. Needs for metadata."
          },
          {
            "name": "description",
            "type": "string",
            "default": "",
            "description": "The description of the docs. Needs for metadata."
          },
          {
            "name": "name",
            "type": "string",
            "default": "",
            "description": "Name of the docs. Needs for metadata. Will be displayed in app header. Also you can find this name near version label in side menu drawer."
          },
          {
            "name": "version",
            "type": "string",
            "default": "",
            "description": "Version of the docs. Needs for metadata."
          },
          {
            "name": "logo",
            "type": "string",
            "default": "",
            "description": "A path to the logo image, will be displayed in drawer near name and version."
          },
          {
            "name": "children",
            "type": "node",
            "default": "",
            "description": "Children of an element. Normally DocsMenu and DocsPages."
          }
        ],
        "forwardRef": true,
        "enableCss": true,
        "css": {
          "root": "Styles applied to the root element.",
          "appBar": "Styles applied to the AppBar element.",
          "appBarShift": "Styles applied to element, designed to compensate drawer.",
          "menuButton": "Styles applied to the menu button.",
          "hide": "Styles applied to the menu button when drawer opened.",
          "drawer": "Styles applied to the Drawer element.",
          "drawerPaper": "Styles applied to the Paper element inside menu Drawer.",
          "drawerHeader": "Styles applied to the head element inside menu Drawer.",
          "content": "Styles applied to the content block.",
          "contentShift": "Styles applied to the content element to compensate drawer.",
          "headerText": "Styles applied to the Typography in AppBar.",
          "toolbar": "Styles applied to the ToolBar element.",
          "headerIcon": "Styles applied to icons in Toolbar.",
          "version": "Styles applied to version badge in side drawer menu."
        }
      }
    },
    "common": {
      "spells": {
        "Props": "Props",
        "Import": "Импорт"
      },
      "ComponentAPI": {
        "importDifferenceText": {
          "text1": "Вы можете узнать больше о разнице, ",
          "link1": "прочитав этот гайд",
          "text2": "."
        },
        "customizationText": "Вы можете переопределить стиль компонента следующими способами:",
        "customizationRule": "С помощью имени правила в ",
        "customizationClass": "С помощью",
        "customizationTheme": "С помощью темы и",
        "customizationFooterText": "Если этого недостаточно, Вы можете посмотреть реализацию кода для большей инфрмации.",
        "ruleName": "Название правила",
        "ruleDescription": "Описание",
        "propName": "Название",
        "propType": "Тип",
        "propDefault": "По умолчанию",
        "propDescription": "Описание",
        "ComponentNameHeader": "Имя компонента"
      }
    }
  }
}