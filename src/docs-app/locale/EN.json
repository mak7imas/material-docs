{
  "name": "english",
  "label": "English",
  "locale": {
    "pages": {
      "DocsPageAPI": {
        "pageAbout": "The API documentation of the DocsPage React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "DocsPage - react component, designed to provide user with page functional",
        "ComponentNameHeader": "Component name",
        "ComponentNameText": "The DocsPage name can be used for providing default props or style overriders at the theme level.",
        "props": {
          "name": "Page name. Route will be generated automatically from name.",
          "searchTags": "Keywords for search engine.",
          "searchLabel": "Label text, displayed in search result if page match search requirements.",
          "searchDescription": "Description text, displayed in search result if page match search requirements.",
          "noGenerateAutoSearch": "If true, page will not generate search items from pages automatically.",
          "noAutoMenu": "If true, page will not participate in auto menu generation."
        },
        "css": {
          "root": "Styles applied to the root element.",
          "contentItem": "Styles applied to the item element of content panel.",
          "contentItemActive": "Styles applied to the item element of content panel if it is active.",
          "contentLink": "Styles applied to the link of item element of content panel.",
          "copyright": "Styles applied to copyright panel if it shown."
        }
      },
      "DemoWithCodeAPI": {
        "pageAbout": "The API documentation of the DemoWithCode React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "DemoWithCode - react component, designed to create code blocks with interactive demo.",
        "ComponentNameText": "The DemoWithCode name can be used for providing default props or style overriders at the theme level.",
        "props": {
          "code": "Code to display in inner Code block.",
          "defaultExpanded": "If true - code area will be expanded on startup.",
          "name": "Name of the component. Will be displayed in H3 header if defined.",
          "noTag": "If true and name prop is defined - header with name will not generate tag for content tab.",
          "paperContainer": "If true - demo content will be wrapped in Paper component.",
          "actions": "Array of additional actions. The actions will be displayed in the dropdown menu when you click the ExpandMore icon button."
        },
        "css": {
          "root": "Styles applied to the root element.",
          "collapse": "Styles applied to the Collapse element, which contains code.",
          "toolbar": "Styles applied to the Toolbar element with icon buttons and name.",
          "paperContainer": "Styles applied to the Paper container element if paperContainer prop is true.",
          "menuButtonLink": "Styles applied to link in extra actions menu."
        }
      },
      "CodeAPI": {
        "pageAbout": "The API documentation of the Code React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "Code - react component, designed to create code blocks.",
        "ComponentNameText": "The Code name can be used for providing default props or style overriders at the theme level.",
        "props": {
          "children": "Code to display in code highlighter.",
          "theme": "Code highlighting and background styling type.",
          "language": "Language name for code highlighter."
        },
        "css": {
          "root": "Styles applied to the root element.",
          "highlighterContainer": "Styles applied to the code highlighter container."
        }
      },
      "PagesGroupAPI": {
        "pageAbout": "The API documentation of the PagesGroup React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "PagesGroup - react component, designed to combine pages in groups for AutoDocsMenu.",
        "ComponentNameText": "The PagesGroup name can be used for providing default props or style overriders at the theme level.",
        "props": {
          "name": "Name of the group. Will be displayed on button in menu.",
          "getData": "Callback, provided to get group data without context usage."
        },
        "noCssText": "This is a service component. It doesn't generate html elements."
      },
      "ImageAPI": {
        "pageAbout": "The API documentation of the Image React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "Image - react component, designed to show images. Image component uses lazy load technology.",
        "ComponentNameText": "The Image name can be used for providing default props or style overriders at the theme level.",
        "props": {
          "src": "Source link. Used to define image path.",
          "alt": "Alternative text. Will be displayed if image can not load.",
          "fullWidth": "If true - image will be 100 percent wide.",
          "children": "Elements, which will appear in image caption."
        },
        "css": {
          "root": "Styles applied to the root element.",
          "fullWidth": "Styles applied to the root component if fullWidth prop is true."
        }
      },
      "ListItemAPI": {
        "pageAbout": "The API documentation of the ListItem React component. Learn more about the props and the CSS customization points.",
        "pageSearchDescription": "ListItem - react component, designed to generate list. Component simulates list item component.",
        "ComponentNameText": "The ListItem name can be used for providing default props or style overriders at the theme level.",
        "props": {
          "type": "Type of list decoration.",
          "dense": "Ff true, vertical distance between list items will be smaller."
        },
        "css": {
          "root": "Styles applied to the root element.",
          "typeCircle": "Styles applied to the root component if type prop equals circle.",
          "typeSquare": "Styles applied to the root component if type prop equals square.",
          "typeRoman": "Styles applied to the root component if type prop equals upper-roman.",
          "typeAlpha": "Styles applied to the root component if type prop equals lower-alpha.",
          "typeNone": "Styles applied to the root component if type prop equals none.",
          "list": "Styles applied to the inner ul element.",
          "dense": "Styles applied to the root element if prop dense is true."
        }
      }
    },
    "common": {
      "spells": {
        "Props": "Props",
        "Import": "Import"
      },
      "ComponentAPI": {
        "importDifferenceText": {
          "text1": "You can learn more about the difference by",
          "link1": "reading this guide",
          "text2": "."
        },
        "customizationText": "You can override the style of the component thanks to one of these customization points:",
        "customizationRule": "With a rule name of the ",
        "customizationClass": "With a",
        "customizationTheme": "With a theme and an",
        "customizationFooterText": "If that's not sufficient, you can check the implementation of the component for more detail.",
        "ruleName": "Rule name",
        "ruleDescription": "Description",
        "propName": "Name",
        "propType": "Type",
        "propDefault": "Default",
        "propDescription": "Description",
        "ComponentNameHeader": "Component name"
      }
    }
  }
}